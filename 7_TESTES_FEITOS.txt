    Person person = new Person();
    @Test
    public void getName_firstNameJonLastNameSnow_jonSnow() {
        person.setName("Jon");
        person.setLastName("Snow");
        Assertions.assertEquals("Jon", person.getFirstName());
        Assertions.assertEquals("Snow", person.getLastName());
        Assertions.assertEquals("JonSnow", person.getName());
    }

    @Test
    public void getName_firstNameJonNoLastName_jon() {
        person.setName("Jon");
        Assertions.assertEquals("Jon", person.getFirstName());
        Assertions.assertEquals("Jon", person.getName());
    }

    @Test
    public void getName_noFirstNameLastNameSnow_snow() {
        person.setLastName("Snow");
        Assertions.assertEquals("Snow", person.getLastName());
        Assertions.assertEquals("Snow", person.getName());
    }

    @Test
    public void getName_noFirstNameNorLastName_throwsException() {
       Assertions.assertThrows(RuntimeException.class, () -> person.getName());
    }

    @Test
    public void isBirthdayToday_differentMonthAndDay_false() {
       person.setBirthday(LocalDate.of(2021, 10, 28));
       Assertions.assertFalse(person.isBirthdayToday());
       Assertions.assertNotEquals(person.getBirthday().getMonth(), LocalDate.now().getDayOfMonth());

    }

    @Test
    public void isBirthdayToday_sameMonthDifferentDay_false() {
        person.setBirthday(LocalDate.of(2032, 10, 11));
        Assertions.assertNotEquals(person.getBirthday().getDayOfMonth(), LocalDate.now().getMonth());
        Assertions.assertNotEquals(person.getBirthday().getMonth(), LocalDate.now().getMonth());
        Assertions.assertFalse(person.isBirthdayToday());
    }

    @Test
    public void isBirthdayToday_sameMonthAndDay_true() {
        person.setBirthday(LocalDate.of(2020,8,4));
        Assertions.assertTrue(person.isBirthdayToday());

    }